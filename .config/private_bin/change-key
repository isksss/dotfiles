#!/usr/bin/env python
# -*- coding: utf-8 -*-

#=====#=====#=====#=====#=====#
# Title:
#   CHEANGE-KEY
# Description:
#   Change git user name, email and ssh-key.
# Usage:
#   change-key
# Requirement:
#   python 3.12
#=====#=====#=====#=====#=====#
import os
import json
import argparse
import subprocess

##############################
# variables
##############################
config_dir = "change-key" # config directory
config_keys = "keys" # ssh keys directory
config_file = "config.json" # config file

log_prefix = "[CHANGE-KEY]" # log prefix

cmd_git = "git" # git command
cmd_ssh_key_gen = "ssh-keygen" # ssh-keygen command

##############################
# functions
##############################

# ログを出力する
# @ text ログのテキスト
def log(text: str):
    print(f"{log_prefix} {text}")

# 文字入力を受け付ける
# @ text 文字入力時に表示するテキスト
def input_text(text: str):
    return input(text)

# ConfigファイルのPATHを取得する
def get_config_path():
    # xdg_config_home
    xdg_config_home = os.getenv("XDG_CONFIG_HOME")
    if xdg_config_home is None:
        home = os.getenv("HOME")
        xdg_config_home = os.path.join(home, ".config")
    # config_path
    config_path = os.path.join(xdg_config_home, config_dir)
    return config_path

# 初期化
# Configファイルやディレクトリを作成する
def init():
    config_path = get_config_path()
    # config directory
    if not os.path.exists(config_path):
        log("Create config directory.")
        os.makedirs(config_path)

    # keys directory
    keys_path = os.path.join(config_path, config_keys)
    if not os.path.exists(keys_path):
        log("Create keys directory.")
        os.makedirs(keys_path)

    # config file
    config_file_path = os.path.join(config_path, config_file)
    if not os.path.exists(config_file_path):
        log("Create config file.")
        with open(config_file_path, "w") as f:
            json.dump({}, f)

# Configファイルを読み込む
def load_config():
    config_path = get_config_path()
    config_file_path = os.path.join(config_path, config_file)
    with open(config_file_path, "r") as f:
        config = json.load(f)
    return config

# Configファイルを保存する
# @ config 保存するconfig
def save_config(config):
    config_path = get_config_path()
    config_file_path = os.path.join(config_path, config_file)
    with open(config_file_path, "w") as f:
        json.dump(config, f, indent=2)

# ユーザを保存する
# @ name ユーザ名
# @ email メールアドレス
def save_user(name: str, email: str):
    # Configファイルを読み込む
    config = load_config()
    # configの中にuserがあるか
    if "user" not in config:
        config["user"] = []
    # userの中に同じ名前のユーザがあるか
    for user in config["user"]:
        if user["name"] == name:
            log("User is already exists.")
            return
    # userを追加
    user = {"name": name, "email": email}
    config["user"].append(user)
    save_config(config)

# ユーザを設定する
# @ name ユーザ名
def set_user(name: str):
    # Configファイルを読み込む
    config = load_config()
    # userの中に同じ名前のユーザがあるか
    if not is_user_exists(name):
        log("User is not found.")
        return
    # userを設定
    for user in config["user"]:
        if user["name"] == name:
            # git user name
            subprocess.run([cmd_git, 'config', '--global', 'user.name', user["name"]],
                            stdout=subprocess.DEVNULL, 
                            stderr=subprocess.STDOUT)
            # git user email
            subprocess.run([cmd_git, 'config', '--global', 'user.email', user["email"]],
                            stdout=subprocess.DEVNULL, 
                            stderr=subprocess.STDOUT)
            # ssh-key
            # ssh_key_path = get_ssh_key_path(name)
            # subprocess.run([cmd_git, 'config', '--global', 'core.sshCommand', f'ssh -i {ssh_key_path} -F /dev/null'],
            #                 stdout=subprocess.DEVNULL, 
            #                 stderr=subprocess.STDOUT)
            # シンボリックリンクを作成
            ssh_key_path = get_ssh_key_path(name)
            # シンボリックリンクを削除
            remove_symlink(ssh_key_path)
            create_symlink(ssh_key_path)
            log("Git user is set.")
            return


# シンボリックリンクを作成する
def create_symlink(key_path:str):
    # .sshディレクトリのPATHを取得
    ssh_dir_path = os.path.join(os.getenv("HOME"), ".ssh")
    # .sshディレクトリが存在しない場合
    if not os.path.exists(ssh_dir_path):
        # .sshディレクトリを作成
        os.makedirs(ssh_dir_path)
        
    # シンボリックリンクを作成
    ssh_path = os.path.join(ssh_dir_path, "id_ed25519")
    os.symlink(key_path, os.path.join(ssh_dir_path, "id_ed25519"))
    # 公開鍵
    ssh_pub_path = os.path.join(ssh_dir_path, "id_ed25519.pub")
    os.symlink(key_path + ".pub", ssh_pub_path)

# シンボリックリンクを削除する
def remove_symlink(key_path:str):
    # .sshディレクトリのPATHを取得
    ssh_dir_path = os.path.join(os.getenv("HOME"), ".ssh")
    # .sshディレクトリが存在しない場合
    if not os.path.exists(ssh_dir_path):
        return
    # シンボリックリンクが存在する場合
    if os.path.exists(os.path.join(ssh_dir_path, "id_ed25519")):
    # シンボリックリンクを削除
        os.remove(os.path.join(ssh_dir_path, "id_ed25519"))
    # 公開鍵
    if os.path.exists(os.path.join(ssh_dir_path, "id_ed25519.pub")):
        os.remove(os.path.join(ssh_dir_path, "id_ed25519.pub"))

# ssh-keyを設定する
# @ name ユーザ名
def generate_ssh_key(name: str):
    # Configファイルを読み込む
    config = load_config()
    # userの中に同じ名前のユーザがあるか
    if not is_user_exists(name):
        log("User is not found.")
        return
    # ssh-keyを生成
    ssh_key_path = get_ssh_key_path(name)

    # ssh-keyが存在する場合
    if os.path.exists(ssh_key_path):
        log("SSH key is already exists.")
        return
    subprocess.run([cmd_ssh_key_gen, '-t', 'ed25519', '-b', '4096', '-f', ssh_key_path, '-N', '', '-C', ''],
                    stdout=subprocess.DEVNULL, 
                    stderr=subprocess.STDOUT)
    
    # subprocessが終了するまで待機
    log("Generating SSH key...")
    log("Please wait...")

    log("SSH key is generated.")


# ssh_key_pathを取得する
# @ name ユーザ名
def get_ssh_key_path(name: str):
    # Configファイルを読み込む
    config = load_config()
    # userの中に同じ名前のユーザがあるか
    if not is_user_exists(name):
        log("User is not found.")
        return
    # ssh-keyのPATHを取得
    ssh_key_path = os.path.join(get_config_path(), config_keys, name)
    return ssh_key_path

# ユーザが存在するか
# @ name ユーザ名
# @ return 存在するか
def is_user_exists(name: str) -> bool:
    # Configファイルを読み込む
    config = load_config()
    # userの中に同じ名前のユーザがあるか
    for user in config["user"]:
        if user["name"] == name:
            return True
    return False

# ssh-keyを削除する
# @ name ユーザ名
def remove_ssh_key(name: str):
    # Configファイルを読み込む
    config = load_config()
    # userの中に同じ名前のユーザがあるか
    if not is_user_exists(name):
        log("User is not found.")
        return
    # ssh-keyのPATHを取得
    ssh_key_path = get_ssh_key_path(name)
    # ssh-keyを削除
    os.remove(ssh_key_path)
    log("SSH key is removed.")

def copy_ssh_key(name: str):
    # ssh-keyのPATHを取得
    ssh_key_path = get_ssh_key_path(name)

    # symlinkを削除
    remove_symlink(ssh_key_path)

    # ssh-keyを.sshディレクトリにコピー
    ssh_dir_path = os.path.join(os.getenv("HOME"), ".ssh")
    # .sshディレクトリが存在しない場合
    if not os.path.exists(ssh_dir_path):
        # .sshディレクトリを作成
        os.makedirs(ssh_dir_path)
    # ssh-keyをコピー
    ssh_path = os.path.join(ssh_dir_path, "id_ed25519")
    subprocess.run(["cp", ssh_key_path, ssh_path],
                    stdout=subprocess.DEVNULL, 
                    stderr=subprocess.STDOUT)

    # 公開鍵
    ssh_pub_path = os.path.join(ssh_dir_path, "id_ed25519.pub")
    subprocess.run(["cp", ssh_key_path + ".pub", ssh_pub_path],
                    stdout=subprocess.DEVNULL, 
                    stderr=subprocess.STDOUT)

##############################
# subcommands
##############################

# initサブコマンド
def subcommand_init(args: argparse.Namespace):
    name = args.name
    email = args.email
    # Configファイルを読み込む
    config = load_config()
    if config is None:
        log("Config file is not found.")
        return
    
    # ユーザを追加
    save_user(name, email)

# addサブコマンド
def subcommand_add(args: argparse.Namespace):
    name = args.name
    email = args.email
    # ユーザを追加
    save_user(name, email)
    # ssh-keyを生成
    generate_ssh_key(name)

    log("Config file is updated.")
    return

# removeサブコマンド
def subcommand_remove(args: argparse.Namespace):

    name = args.name
    # Configファイルを読み込む
    config = load_config()
    if config is None:
        log("Config file is not found.")
        return
    
    # userの中に同じ名前のユーザがあるか
    for user in config["user"]:
        if user["name"] == name:
            config["user"].remove(user)
            # ssh-keyを削除
            remove_ssh_key(name)
            save_config(config)
            log("Config file is updated.")
            return
    log("User is not found.")

# listサブコマンド
def subcommand_list(args: argparse.Namespace):
    # Configファイルを読み込む
    config = load_config()
    if config is None:
        log("Config file is not found.")
        return
    
    # ユーザがない場合
    if "user" not in config:
        log("User is not found.")
        return
    
    # ユーザを表示
    for user in config["user"]:
        log(f"user: {user['name']} <{user['email']}>")

# setサブコマンド
def subcommand_set(args: argparse.Namespace):
    name = args.name
    # ユーザを設定
    is_cp = args.copy
    set_user(name)
    if is_cp:
        copy_ssh_key(name)
    
# checkサブコマンド
def subcommand_check(args: argparse.Namespace):
    # Configファイルを読み込む
    config = load_config()
    if config is None:
        log("Config file is not found.")
        return
    
    # ユーザがない場合
    if "user" not in config:
        log("User is not found.")
        return
    
    # ユーザを表示
    for user in config["user"]:
        log(f"user: {user['name']} <{user['email']}>")
        ssh_key_path = get_ssh_key_path(user["name"])
        if os.path.exists(ssh_key_path):
            # ssh-keyで接続できるか
            log("SSH key is connecting...")
            cmd = ["ssh", "-i", ssh_key_path, "-T", "git@github.com", "-o", "ConnectTimeout 5"]
            result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=10)
            # timeout
            if result.returncode == 255:
                log("SSH is timeout.")
                break
            # 出力を表示
            if result.stdout is not None:
                log(result.stdout.decode("utf-8"))
            if result.stderr is not None:
                log(result.stderr.decode("utf-8"))
        else:
            log("SSH key is not exists.")

##############################
# Main
##############################
def main():
    # 初期化
    init()

    # コマンドライン引数のパーサーを作成
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='command')

    # init サブコマンド
    parser_init = subparsers.add_parser('init', help='Initialize config.')
    parser_init.add_argument('name',help='User name.')
    parser_init.add_argument('email',help='Email.')

    # addサブコマンド
    parser_add = subparsers.add_parser('add', help='Add user.')
    parser_add.add_argument('name', help='User name.')
    parser_add.add_argument('email', help='Email.')

    # removeサブコマンド
    parser_remove = subparsers.add_parser('remove', help='Remove user.')
    parser_remove.add_argument('name', help='User name.')

    # listサブコマンド
    parser_list = subparsers.add_parser('list', help='List user.')

    # setサブコマンド
    parser_set = subparsers.add_parser('set', help='Set user.')
    parser_set.add_argument('name', help='User name.')
    parser_set.add_argument('-c', '--copy', action='store_true',help='Do not link ssh-key.Copy.', default=False,)

    # helpサブコマンド
    parser_help = subparsers.add_parser('help', help='Show help.')

    # checkサブコマンド
    parser_check = subparsers.add_parser('check', help='Check.')

    # 引数を解析
    args = parser.parse_args()

    # Configファイルを読み込む
    config = load_config()
    if config is None:
        log("Config file is not found.")
        return

    # subcommand
    if args.command == "add":
        subcommand_add(args)
    elif args.command == "init":
        subcommand_init(args)
    elif args.command == "remove":
        subcommand_remove(args)
    elif args.command == "list":
        subcommand_list(args)
    elif args.command == "set":
        subcommand_set(args)
    elif args.command == "check":
        subcommand_check(args)
    elif args.command == "help":
        parser.print_help()
    else:
        # helpを表示
        parser.print_help()
    
    return

##############################
# エントリーポイント
##############################
if __name__ == "__main__":
    main()
else:
    log("This script is not imported.") # インポートされた場合はエラーを出力する